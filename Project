General description of the project
The goal of the project is to create an iOS application that allows users to scan physical space using a LiDAR sensor, save the resulting 3D meshes locally, and eventually share them through cloud services.
Key functional requirements:
Scanning the surrounding space using LiDAR
Real-time visualization of the scanning process
Saving the resulting 3D meshes to local storage
Providing a user interface for managing the process
Technology stack and key components
Required technologies:
ARKit 4.0+ is the main framework for working with augmented reality and LiDAR
Documentation: Apple ARKit Documentation
Special attention: ARWorldTrackingConfiguration and sceneReconstruction parameter
SceneKit/RealityKit - frameworks for 3D rendering
SceneKit documentation: Apple SceneKit
RealityKit documentation: Apple RealityKit
Note: RealityKit is a newer framework with better integration with ARKit.
Model I/O - a framework for working with 3D assets
Documentation: Apple Model I/O
Key components: MDLAsset, MDLMesh for geometry export
Metal - low-level graphics API
Documentation: Apple Metal
It is used to interact with geometry buffers.
Hardware Requirements:
iPhone 12 Pro/Pro Max or later, iPad Pro 2020 or later (any device with LiDAR sensor)
iOS 14.0 or later
Minimum support: iOS 14.0 to access LiDAR features
Application architecture and key processes
Main modules:
Scanning module - interaction with ARKit and LiDAR sensor
Visualization module - displays the scanning process
Data processing module - mesh transformation and optimization
Storage Module - saving a 3D model to local storage
Key processes:
1. Initialize the scan
Important: LLM often forgets to check LiDAR availability via ARWorldTrackingConfiguration.supportsSceneReconstruction(.mesh)
Main process: Setting up ARSession with the sceneReconstruction option enabled
A request for permission to use the camera is required
2. Mesh tracking and processing
Process: Extracting ARMeshAnchor from ARSession updates
Important: LLM may misinterpret working with vertex/index buffers when extracting geometry.
Requires constant tracking via the ARSession delegate
3. Scan visualization
Approaches:
Direct mapping via SceneKit (easier)
Using RealityKit with materials (more difficult, but better integrated with ARKit)
Important: LLM may omit the importance of overlaying materials on the mesh for visual feedback
4. Mesh conversion and export
Process: converting ARMeshAnchor to MDLMesh format
Critical point: LLM often confuses working with buffers and coordinate transformation
Correct operation with MTLDevice is required to create buffers.
5. Saving data
Main formats: OBJ, USDZ (recommended for iOS)
Location: Documents/Caches folder of the application
Important: LLM can forget about the need to work with the iOS file system and the required permissions.
Potential problems and their solutions
1. Performance
Problem: High mesh detail can lead to a drop in FPS
Solution: using levels of detail (LOD) or simplifying geometry
Documentation: MDLMesh.newSubdividedMesh
2. Scan accuracy
Problem: Reflective or transparent surfaces can distort the results.
Solution: adding user instructions and filtering mesh errors
Link: Understanding LiDAR sensor limits
3. The size of the exported files
Problem: Detailed meshes can take up a lot of space.
Solution: implementing polygon optimization algorithms and/or using compression
Important: LLM may not take into account the need to work with large files.
4. Merging multiple meshes
Problem: By default, ARKit creates separate meshes for different surfaces
Solution: implementation of the mesh merging algorithm
Documentation: MDLMesh addSubmeshes
User Interface and UX
Main Screens:
The scan screen is the main interface with AR representation
Scan Control screen - controls (start/stop/save)
Scan gallery - View saved scans
Settings - configuration of scan details
UX Recommendations:
Providing visual feedback during scanning (e.g. color indication of scan completeness)
Using simple gestures to control (touch to start/stop, swipe to cancel)
Displaying the progress and quality of the scan
Clear instructions for the user on optimal scanning
Additional recommendations and resources
Ready-made solutions and libraries:
ARKit-SCNPath is a library for working with paths in ARKit: https://github.com/maxxfrazer/ARKit-SCNPath
ARVideoKit - recording AR sessions: https://github.com/AFathi/ARVideoKit
SwiftScanner is a simplified interface for scanning objects: https://github.com/swiftscanner/SwiftScanner
Useful documentation:
ARKit Scene Reconstruction Guide
Working with Scene Reconstruction
RealityKit Object Capture
Frequently overlooked LLM aspects:
The need to handle the ARSession lifecycle (pausing/resuming when the application goes into the background)
Proper memory management when processing large meshes
ARKit error handling and correct user information
Checking the availability of functions before using them (especially for devices without LiDAR)
Correct work with the coordinate system and transformations
, Expanding functionality (in the future)
Cloud storage and sharing:
Firebase Storage for storing meshes: https://firebase.google.com/docs/storage
Google Cloud Anchors for linking AR content to the real world: https://developers.google.com/ar/develop/cloud-anchors
Realtime Database for metadata synchronization: https://firebase.google.com/docs/database
Additional functions:
Texturing meshes using the device's camera
Classification of objects on the stage (floor, walls, furniture, etc.): https://developer.apple.com/documentation/arkit/environmental_analysis/identifying_and_labeling_real-world_objects
Editing a scanned mesh
Export to various 3D formats: https://developer.apple.com/documentation/modelio/mdlasset/1391114-export
Conclusion
When developing a LiDAR scanning application, the key is to properly integrate ARKit and understand the specifics of working with 3D geometry. LLM should pay special attention to the correct initialization of ARSession with support for scene reconstruction, the correct conversion of LiDAR data into 3D mesh formats, and ensuring adequate performance on users' devices.
This guide provides the basics for creating a functional application with the minimum set of functions needed to scan and save 3D meshes on iOS devices with LiDAR.